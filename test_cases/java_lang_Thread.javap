Compiled from "Thread.java"
public class java.lang.Thread implements java.lang.Runnable {
  public static final int MIN_PRIORITY;
    Signature: I
  public static final int NORM_PRIORITY;
    Signature: I
  public static final int MAX_PRIORITY;
    Signature: I
  public static native java.lang.Thread currentThread();
    Signature: ()Ljava/lang/Thread;

  public static native void yield();
    Signature: ()V

  public static native void sleep(long) throws java.lang.InterruptedException;
    Signature: (J)V

  public static void sleep(long, int) throws java.lang.InterruptedException;
    Signature: (JI)V

  public java.lang.Thread();
    Signature: ()V

  public java.lang.Thread(java.lang.Runnable);
    Signature: (Ljava/lang/Runnable;)V

  public java.lang.Thread(java.lang.ThreadGroup, java.lang.Runnable);
    Signature: (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V

  public java.lang.Thread(java.lang.String);
    Signature: (Ljava/lang/String;)V

  public java.lang.Thread(java.lang.ThreadGroup, java.lang.String);
    Signature: (Ljava/lang/ThreadGroup;Ljava/lang/String;)V

  public java.lang.Thread(java.lang.Runnable, java.lang.String);
    Signature: (Ljava/lang/Runnable;Ljava/lang/String;)V

  public java.lang.Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String);
    Signature: (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V

  public java.lang.Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long);
    Signature: (Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V

  public synchronized void start();
    Signature: ()V

  public void run();
    Signature: ()V

  public final void stop();
    Signature: ()V

  public final synchronized void stop(java.lang.Throwable);
    Signature: (Ljava/lang/Throwable;)V

  public void interrupt();
    Signature: ()V

  public static boolean interrupted();
    Signature: ()Z

  public boolean isInterrupted();
    Signature: ()Z

  public void destroy();
    Signature: ()V

  public final native boolean isAlive();
    Signature: ()Z

  public final void suspend();
    Signature: ()V

  public final void resume();
    Signature: ()V

  public final void setPriority(int);
    Signature: (I)V

  public final int getPriority();
    Signature: ()I

  public final void setName(java.lang.String);
    Signature: (Ljava/lang/String;)V

  public final java.lang.String getName();
    Signature: ()Ljava/lang/String;

  public final java.lang.ThreadGroup getThreadGroup();
    Signature: ()Ljava/lang/ThreadGroup;

  public static int activeCount();
    Signature: ()I

  public static int enumerate(java.lang.Thread[]);
    Signature: ([Ljava/lang/Thread;)I

  public native int countStackFrames();
    Signature: ()I

  public final synchronized void join(long) throws java.lang.InterruptedException;
    Signature: (J)V

  public final synchronized void join(long, int) throws java.lang.InterruptedException;
    Signature: (JI)V

  public final void join() throws java.lang.InterruptedException;
    Signature: ()V

  public static void dumpStack();
    Signature: ()V

  public final void setDaemon(boolean);
    Signature: (Z)V

  public final boolean isDaemon();
    Signature: ()Z

  public final void checkAccess();
    Signature: ()V

  public java.lang.String toString();
    Signature: ()Ljava/lang/String;

  public java.lang.ClassLoader getContextClassLoader();
    Signature: ()Ljava/lang/ClassLoader;

  public void setContextClassLoader(java.lang.ClassLoader);
    Signature: (Ljava/lang/ClassLoader;)V

  public static native boolean holdsLock(java.lang.Object);
    Signature: (Ljava/lang/Object;)Z

  public java.lang.StackTraceElement[] getStackTrace();
    Signature: ()[Ljava/lang/StackTraceElement;

  public static java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]> getAllStackTraces();
    Signature: ()Ljava/util/Map;

  public long getId();
    Signature: ()J

  public java.lang.Thread$State getState();
    Signature: ()Ljava/lang/Thread$State;

  public static void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
    Signature: (Ljava/lang/Thread$UncaughtExceptionHandler;)V

  public static java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
    Signature: ()Ljava/lang/Thread$UncaughtExceptionHandler;

  public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
    Signature: ()Ljava/lang/Thread$UncaughtExceptionHandler;

  public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
    Signature: (Ljava/lang/Thread$UncaughtExceptionHandler;)V
}
